(function ListExpr-length (ListExpr) i64)
(function ListExpr-ith (ListExpr i64) Expr :unextractable)
(function ListExpr-suffix (ListExpr i64) ListExpr :unextractable)
(relation DemandListExpr-ith (ListExpr))
(function Append (ListExpr Expr) ListExpr :unextractable)

(rule ((Switch pred branch)) ((union (ListExpr-suffix branch 0) branch)) :ruleset always-run)


(rule ((DemandListExpr-ith list))
      ((union (ListExpr-suffix list 0) list)) :ruleset always-run)
(rule ((= (ListExpr-suffix top n) (Cons hd tl)))
    ((union (ListExpr-ith top n) hd)
     (union (ListExpr-suffix top (+ n 1)) tl)) :ruleset always-run)

(rule ((= (ListExpr-suffix list n) (Nil)))
    ((set (ListExpr-length list) n)) :ruleset always-run)

(rewrite (Append (Cons a b) e)
   (Cons a (Append b e))
   :ruleset always-run)
(rewrite (Append (Nil) e)
   (Cons e (Nil))
   :ruleset always-run)

(function tuple-ith (Expr i64) Expr :unextractable)
(function tuple-length (Expr) i64 :unextractable)

(rule ((HasType expr (TupleT tl))
       (= len (TypeList-length tl)))
      ((set (tuple-length expr) len)) :ruleset always-run)

(rule ((Single expr)) ((union (tuple-ith (Single expr) 0) expr)) :ruleset always-run)
(rule ((Concat ord expr1 expr2)
       (= ith (tuple-ith expr1 i)))
       ((union (tuple-ith (Concat ord expr1 expr2) i) ith)) :ruleset always-run)

(rule ((Concat ord expr1 expr2)
       (= len1 (tuple-length expr1))
       (= ith (tuple-ith expr2 i)))
       ((union (tuple-ith (Concat ord expr1 expr2) (+ len1 i)) ith)) :ruleset always-run)



;; ################## 
;; Represents an e-node in the database, currently only let and dowhile supported
(datatype ENode
  (LetNode Expr Expr)
  (DoWhileNode Expr Expr))


;; A context path is a potentially infinite stream of (e-node, context) pairs.
;; When we visit an e-node for the second time, we have found a cycle in the egraph.
;; Then the corresponding contexts are inferred to be equal.
(datatype ContextPath
  (PathNil)
  (PathCons ENode Assumption ContextPath))

(relation Path-contains (ContextPath ContextPath))

(rule ((= lhs (PathCons hd1 hd2 tl)))
      ((Path-contains lhs lhs)))
(rule ((Path-contains top (PathCons hd1 hd2 tl)))
      ((Path-contains top tl)) :ruleset always-run)

;; This is the key rule that detects when contexts are equal
(rule ((= lhs (PathCons node ctx1 rest))
       (Path-contains rest
         (PathCons node ctx2 rest2)))
      ((union ctx1 ctx2)
       (union lhs rest)) :ruleset always-run)
