;; Loop Splitting
(ruleset loop-splitting)

; i = a
; do while i < c:
;     if i <= b:
;         if_else
;     else:
;         if_else
;     i += 1
; ----------------------
; i = a
; do while i < b:
;     if_else
;     i += 1
; if i < c:
;     do while i < c:
;         if_else
;         i += 1

(rule ((= do_while (DoWhile inputs pred_and_body))
       (HasArgType do_while do_while_arg_type)
       (ContextOf do_while outer_ctx)

       (= a (Get inputs 1))
       (= 2 (tuple-length inputs))

       (= i (Get (InContext do_while_ctx (Arg inner_arg_type)) 1))
       (= one (InContext do_while_ctx (Const (Int 1) inner_arg_type)))

       (= loop_pred (Get pred_and_body 0))
       (= if_node (Get pred_and_body 1))
       (= i_plus_one (Get pred_and_body 2))
       (= 3 (tuple-length pred_and_body))

       (= loop_pred (Bop (LessThan) i c))
       (= i_plus_one (Bop (Add) i one))
       (= if_node (Get (If if_pred if_inputs if_then if_else) 0))
       (= if_pred (Bop (LessEq) i b))

       (= (lo-bound a) (IntB a1)) (= (hi-bound a) (IntB a2))
       (= (lo-bound b) (IntB b1)) (= (hi-bound b) (IntB b2))
       (= (lo-bound c) (IntB c1)) (= (hi-bound c) (IntB c2))
       (< a2 b1)
       (<= b2 c1)

       (= b (InContext do_while_ctx (Const b_const inner_arg_type)))
       (= c (InContext do_while_ctx (Const c_const inner_arg_type))))

      ((let a_to_b (DoWhile inputs (Concat
            (Single (Bop (LessThan) i b))
            (Concat
                (Single (Get (Subst do_while_ctx if_inputs if_then) 0))
                (Single i_plus_one)
            )
        )))

       (let b_to_c (DoWhile a_to_b (Concat
            (Single (Bop (LessThan) i c))
            (Concat
                (Single (Get (Subst do_while_ctx if_inputs if_else) 0))
                (Single i_plus_one)
            )
        )))

       (let if_arg_type (TupleT (TCons (StateT)
                                       (TCons (IntT)
                                              (TCons (StateT)
                                                     (TCons (IntT)
                                                            (TNil)))))))

       (let outer_b (InContext do_while_ctx (Const b_const do_while_arg_type)))
       (let outer_c (InContext do_while_ctx (Const c_const do_while_arg_type)))

       (let b_to_c_if (If
            (Bop (LessThan) outer_b outer_c)
            (Concat b_to_c a_to_b)
            (Concat (Single (Get (Arg if_arg_type) 0)) (Single (Get (Arg if_arg_type) 1)))
            (Concat (Single (Get (Arg if_arg_type) 2)) (Single (Get (Arg if_arg_type) 3)))))

       (union do_while b_to_c_if)
       )

      :ruleset loop-splitting)
