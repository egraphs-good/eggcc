@main() {
  loop_incr: int = const 1;
  loop_counter: int = const 10;
  loop_bound: int = const 30;
.loop_cond:
  loop_cond: bool = lt loop_counter loop_bound;
  br loop_cond .loop_body .loop_done;
.loop_body:
  loop2_counter: int = const 10;
.loop2_cond:
  loop2_cond: bool = lt loop2_counter loop_bound;
  br loop2_cond .loop2_body .loop2_done;
.loop2_body:
  loop3_counter: int = const 10;
.loop3_cond:
  loop3_cond: bool = lt loop3_counter loop_bound;
  br loop3_cond .loop3_body .loop3_done;
.loop3_body:
  loop4_counter: int = const 10;
.loop4_cond:
  loop4_cond: bool = lt loop4_counter loop_bound;
  br loop4_cond .loop4_body .loop4_done;
.loop4_body:
  call @orig_main loop_counter loop2_counter loop3_counter loop4_counter;
  loop4_counter: int = add loop4_counter loop_incr;
  jmp .loop4_cond;
.loop4_done:  
  loop3_counter: int = add loop3_counter loop_incr;
  jmp .loop3_cond;
.loop3_done:  
  loop2_counter: int = add loop2_counter loop_incr;
  jmp .loop2_cond;
.loop2_done:
  loop_counter: int = add loop_counter loop_incr;
  jmp .loop_cond;
.loop_done:
}

@orig_main (x1 : int, y1: int, x2: int, y2 : int) {
      a1: int = call @area x1 y1;
      a2: int = call @area x2 y2;
      res: int = sub a1 a2;
      a1_bigger: bool = gt a1 a2;
      br a1_bigger .end .flip;
.flip:
      neg1: int = const -1;
      res: int = mul res neg1;
.end:
      print res;
}

@area (x : int, y : int) : int {
      area: int = mul x y;
      print area;
      ret area;
}
