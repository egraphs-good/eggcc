(ruleset interval-analysis)

(datatype Interval
  (BoolI bool bool)
  (IntI i64 i64)
  (interval-intersect Interval Interval)
  (interval-union Interval Interval))

; Interval combinators
(rewrite (interval-intersect (IntI la ha) (IntI lb hb))
         (IntI (max la lb) (min ha hb))
         :ruleset interval-analysis)
(rewrite (interval-union (IntI la ha) (IntI lb hb))
         (IntI (min la lb) (max ha hb))
         :ruleset interval-analysis)
(rewrite (interval-intersect (BoolI la ha) (BoolI lb hb))
         (BoolI (or la lb) (and ha hb))
         :ruleset interval-analysis)
(rewrite (interval-union (BoolI la ha) (BoolI lb hb))
         (BoolI (and la lb) (or ha hb))
         :ruleset interval-analysis)


; Interval Table
(function ival (Expr) Interval
  :merge (interval-intersect old new))

; Consts
(rule (
       (= lhs (Num id value))
       (ExprIsValid lhs)
      )
      ((set (ival lhs) (IntI value value)))
      :ruleset interval-analysis)
(rule (
       (= lhs (Boolean id value))
       (ExprIsValid lhs)
      )
      ((set (ival lhs) (BoolI value value)))
      :ruleset interval-analysis)      

; Constant folding from interval analysis
(rule (
        (= (IntI x x) (ival expr))
        (ExprIsPure expr)
        (ExprHasRefId expr id)
      )
      ((union expr (Num id x)))
      :ruleset interval-analysis)
(rule (
        (= (BoolI x x) (ival expr))
        (ExprIsPure expr)
        (ExprHasRefId expr id)
      )
      ((union expr (Boolean id x)))
      :ruleset interval-analysis)

; < a b interval is (< ha lb) (< la hb)
(rule (
       (= lhs (LessThan a b))
       (ExprIsValid lhs)
       (= (IntI la ha) (ival a))
       (= (IntI lb hb) (ival b))
      )
      ((set (ival lhs) (BoolI (bool-< ha lb) (bool-< la hb))))
      :ruleset interval-analysis)

; + a b interval is (+ la lb) (+ ha hb)
(rule (
       (= lhs (Add a b))
       (ExprIsValid lhs)
       (= (IntI la ha) (ival a))
       (= (IntI lb hb) (ival b))
      )
      ((set (ival lhs) (IntI (+ la lb) (+ ha hb))))
      :ruleset interval-analysis)

; Switch interval is union of branch intervals
(rule (
       (= lhs (Switch pred (Cons A (Cons B (Nil)))))
       (ExprIsValid lhs)
       (= a-ival (ival A))
       (= b-ival (ival B))
      )
      ((set (ival lhs) (interval-union a-ival b-ival)))
      :ruleset interval-analysis)
