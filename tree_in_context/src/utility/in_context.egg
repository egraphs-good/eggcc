; This file propogates in_context nodes top-down from functions.
; It gives each program path a unique equality relation.
; This can be quite expensive, so be careful running these rules.

(ruleset context_propagate)
(ruleset context_creation)

(sort InContextList)

; Here's a helpful rule that chooses a more specific context over
; an inner, less specific one.
(rewrite (InContext assumption (InContext assumption2 rest))
         (InContext assumption rest)
         :ruleset context_propagate)

; ################### operations
(rewrite (InContext asum (Bop op c1 c2))
         (Bop op (InContext asum c1) (InContext asum c2))
         :ruleset context_propagate)
(rewrite (InContext assum (Uop op c1))
         (Uop op (InContext assum c1))
         :ruleset context_propagate)
(rewrite (InContext assum (Get expr index))
         (Get (InContext assum expr) index)
         :ruleset context_propagate)
(rewrite (InContext assum (Alloc expr ty))
         (Alloc (InContext assum expr) ty)
         :ruleset context_propagate)
(rewrite (InContext assum (Call name expr))
         (Call name (InContext assum expr))
         :ruleset context_propagate)

; ################### tuple operations
(rewrite (InContext assum (Single expr))
         (Single (InContext assum expr))
         :ruleset context_propagate)
(rewrite (InContext assum (Concat order e1 e2))
         (Concat order (InContext assum e1) (InContext assum e2))
         :ruleset context_propagate)

;                       assumptions, predicate, cases,   current case
(function SwitchInContext (InContextList   Expr       ListExpr i64) ListExpr :unextractable) 

(rewrite (InContext assum (If pred then else))
         (If (InContext assum pred)
             (InContext
               (InIf true (InContext assum pred)) then)
             (InContext
               (InIf false (InContext assum pred)) else))
         :ruleset context_propagate)



; ###########################  Context creation

(relation ContextLess (Expr))
(relation ContextLessList (ListExpr))


;; check that term has no context to ensure saturation
(rule
 ((= lhs (Function name in_ty out_ty out))
  (ContextLess out))
 ((union lhs
   (Function name in_ty out_ty
      (InContext (InFunc  name)
               out))))
 :ruleset context_creation)

(rule ((= lhs (InContext assum (Let inputs body)))
       (ContextLess inputs)
       (ContextLess body))
      ((union lhs
        (Let
           (InContext assum inputs)
           (InContext
             (InLet (InContext assum inputs))
             body))))
          :ruleset context_creation)


(rule ((= lhs (InContext assum (DoWhile inputs pred_outputs)))
       (ContextLess inputs)
       (ContextLess pred_outputs))
      ((union lhs
         (DoWhile
           (InContext assum inputs)
           (InContext
             (InLoop (InContext assum inputs) pred_outputs)
              pred_outputs))))
        :ruleset context_creation)




(rule ((Arg scope ty)) ((ContextLess (Arg scope ty))) :ruleset context_propagate)
(rule ((Const c)) ((ContextLess (Const c))) :ruleset context_propagate)
(rule ((Empty)) ((ContextLess (Empty))) :ruleset context_propagate)
(rule ((Bop op a b)
       (ContextLess a)
        (ContextLess b))
      ((ContextLess (Bop op a b))) :ruleset context_propagate)
(rule ((Uop op a)
       (ContextLess a))
      ((ContextLess (Uop op a))) :ruleset context_propagate)
(rule ((Get a i)
       (ContextLess a))
      ((ContextLess (Get a i))) :ruleset context_propagate)
(rule ((Alloc a ty)
       (ContextLess a))
      ((ContextLess (Alloc a ty))) :ruleset context_propagate)
(rule ((Call name a)
       (ContextLess a))
      ((ContextLess (Call name a))) :ruleset context_propagate)
(rule ((Single a)
       (ContextLess a))
      ((ContextLess (Single a))) :ruleset context_propagate)
(rule ((Concat order a b)
       (ContextLess a)
       (ContextLess b))
      ((ContextLess (Concat order a b))) :ruleset context_propagate)
(rule ((If pred then else)
       (ContextLess pred)
       (ContextLess then)
       (ContextLess else))
      ((ContextLess (If pred then else))) :ruleset context_propagate)
(rule ((Switch pred cases)
       (ContextLess pred)
       (ContextLessList cases))
      ((ContextLess (Switch pred cases))) :ruleset context_propagate)
(rule ((Let inputs body)
       (ContextLess inputs)
       (ContextLess body))
      ((ContextLess (Let inputs body))) :ruleset context_propagate)
(rule ((DoWhile inputs pred_outputs)
       (ContextLess inputs)
       (ContextLess pred_outputs))
      ((ContextLess (DoWhile inputs pred_outputs))) :ruleset context_propagate)
(rule ((Nil)) ((ContextLessList (Nil))) :ruleset context_propagate)
(rule ((Cons a b)
       (ContextLess a)
       (ContextLessList b))
      ((ContextLessList (Cons a b))) :ruleset context_propagate)
(rule ((Function name in_ty out_ty out)
       (ContextLess out))
      ((ContextLess (Function name in_ty out_ty out))) :ruleset context_propagate)