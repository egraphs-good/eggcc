(ruleset terms)

(sort TermAndCost)
(function Smaller (TermAndCost TermAndCost) TermAndCost)

(function ExtractedExpr (Expr) TermAndCost
  :merge (Smaller old new))

(function TCPair (Term i64) TermAndCost)

;; Resolve Smaller
(rule (
        (= lhs (Smaller (TCPair t1 cost1) (TCPair t2 cost2)))
        (<= cost1 cost2)
      )
      ((union lhs (TCPair t1 cost1)))
      :ruleset terms)

(rule (
        (= lhs (Smaller (TCPair t1 cost1) (TCPair t2 cost2)))
        (> cost1 cost2) 
      )
      ((union lhs (TCPair t2 cost2)))
      :ruleset terms)

; Compute smallest Expr bottom-up
(rule ((= lhs (Const c ty ass)))
      ((set (ExtractedExpr lhs) (TCPair (TermConst c) 1)))
      :ruleset terms)

(rule ((= lhs (Arg ty ass)))
      ((set (ExtractedExpr lhs) (TCPair (TermArg) 1)))
      :ruleset terms)

(rule (
        (= lhs (Bop o e1 e2))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t2 c2) (ExtractedExpr e2))
      )
      ((set (ExtractedExpr lhs) (TCPair (TermBop o t1 t2) (+ 1 (+ c1 c2)))))
      :ruleset terms)

(rule (
        (= lhs (Top o e1 e2 e3))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t2 c2) (ExtractedExpr e2))
        (= (TCPair t3 c3) (ExtractedExpr e3))
      )
      ((set (ExtractedExpr lhs) (TCPair (TermTop o t1 t2 t3) (+ (+ 1 c1) (+ c2 c3)))))
      :ruleset terms)

(rule (
        (= lhs (Uop o e1))
        (= (TCPair t1 c1) (ExtractedExpr e1))
      )
      ((set (ExtractedExpr lhs) (TCPair (TermUop o t1) (+ 1 c1))))
      :ruleset terms)

(rule (
        (= lhs (Get tup i))
        (= (TCPair t1 c1) (ExtractedExpr tup))
      )
      ; cost of the get is the same as the  cost of the whole tuple
      ((set (ExtractedExpr lhs) (TCPair (TermGet t1 i) c1)))
      :ruleset terms)

; todo Alloc

; todo Call

(rule (
        (= lhs (Single e1))
        (= (TCPair t1 c1) (ExtractedExpr e1))
      )
      ; cost of single is same as cost of the element
      ((set (ExtractedExpr lhs) (TCPair (TermSingle t1) c1)))
      :ruleset terms)

(rule (
        (= lhs (Concat e1 e2))
        (= (TCPair t1 c1) (ExtractedExpr e1))
        (= (TCPair t2 c2) (ExtractedExpr e2))
      )
      ; cost of concat is sum of the costs
      ((set (ExtractedExpr lhs) (TCPair (TermConcat t1 t2) (+ c1 c2))))
      :ruleset terms)


; todo Control flow - not sure if needed
; (rule (
;         (= lhs (If pred inputs thn els))
;         (= (TCPair t1 c1) (ExtractedExpr pred))
;         (= (TCPair t2 c2) (ExtractedExpr inputs))
;         (= (TCPair t3 c3) (ExtractedExpr thn))
;         (= (TCPair t4 c4) (ExtractedExpr els))
;       )
;       ; cost of if is 10 + cost of pred + cost of input + max of branch costs
;       ((set (ExtractedExpr lhs) (TCPair (TermIf t1 t2 t3 t4) (+ 10 (+ (+ c1 c2) (max c3 c4))))))
;       :ruleset terms)