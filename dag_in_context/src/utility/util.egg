(function ListExpr-length (ListExpr) i64)
(function ListExpr-ith (ListExpr i64) Expr :unextractable)
(function ListExpr-suffix (ListExpr i64) ListExpr :unextractable)
(function Append (ListExpr Expr) ListExpr :unextractable)

(rule ((Switch pred inputs branch)) ((union (ListExpr-suffix branch 0) branch)) :ruleset always-run)

(rule ((= (ListExpr-suffix top n) (Cons hd tl)))
    ((union (ListExpr-ith top n) hd)
     (union (ListExpr-suffix top (+ n 1)) tl)) :ruleset always-run)

(rule ((= (ListExpr-suffix list n) (Nil)))
    ((set (ListExpr-length list) n)) :ruleset always-run)

(rewrite (Append (Cons a b) e)
   (Cons a (Append b e))
   :ruleset always-run)
(rewrite (Append (Nil) e)
   (Cons e (Nil))
   :ruleset always-run)

(function tuple-length (Expr) i64 :unextractable)

(rule ((HasType expr (TupleT tl))
       (= len (TypeList-length tl)))
      ((set (tuple-length expr) len)) :ruleset always-run)

;; Create a Get for every index, and rewrite it to see through Concat
(rule ((Single expr)) ((union (Get (Single expr) 0) expr)) :ruleset always-run)
;; initial get
(rule ((Concat expr1 expr2)
       (> (tuple-length (Concat expr1 expr2)) 0))
      ((Get (Concat expr1 expr2) 0))
      :ruleset always-run)
;; next get
(rule ((= concat (Concat expr1 expr2))
       (= len (tuple-length concat))
       (= ith (Get concat i))
       (< (+ i 1) len)
       )
       ((Get (Concat expr1 expr2) (+ 1 i)))
       :ruleset always-run)

;; descend left
(rule ((Get (Concat expr1 expr2) i)
       (= (tuple-length expr1) len1)
       (< i len1))
      ((union (Get (Concat expr1 expr2) i)
              (Get expr1 i)))
       :ruleset always-run)
;; descend right
(rule ((Get (Concat expr1 expr2) i)
       (= (tuple-length expr1) len1)
       (>= i len1))
      ((union (Get (Concat expr1 expr2) i)
              (Get expr2 (- i len1))))
       :ruleset always-run)


(relation IsLeaf (Expr))
(rule ((Arg ty)) ((IsLeaf (Arg ty))) :ruleset always-run)
(rule ((Const val ty)) ((IsLeaf (Const val ty))) :ruleset always-run)
(rule ((Empty ty)) ((IsLeaf (Empty ty))) :ruleset always-run)

(rewrite (Concat (Concat a b) c)
         (Concat a (Concat b c))
         :ruleset always-run)

;;                tuple start len
(function SubTuple (Expr i64 i64) Expr :unextractable)
(rewrite (SubTuple expr x 1)
         (Single (Get expr x)) :ruleset always-run)
(rule ((= f (SubTuple expr a b)) (> b 1))
      ((union f 
         (Concat (Single (Get expr a))
                 (SubTuple expr (+ a 1) (- b 1))))) :ruleset always-run)