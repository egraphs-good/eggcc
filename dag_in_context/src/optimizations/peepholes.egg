; Simple rewrites that don't do a ton with control flow.

(ruleset peepholes)

; peepholes that LLVM does in its lowering pass that we should not do in
; order to have a fair comparison to llvm o0
(ruleset lowering-peepholes)

; =================================
; Arithmetic
; =================================

; a * 0 = 0
(rewrite (Bop (Mul) (Const (Int 0) ty ctx) e) (Const (Int 0) ty ctx) :ruleset peepholes)

; 0 * a = 0
(rewrite (Bop (Mul) e (Const (Int 0) ty ctx)) (Const (Int 0) ty ctx) :ruleset peepholes)

; 1 * a = a
(rewrite (Bop (Mul) (Const (Int 1) ty ctx) e) e :ruleset peepholes)

; a * 1 = 1
(rewrite (Bop (Mul) e (Const (Int 1) ty ctx)) e :ruleset peepholes)

; 0 + a = a
(rewrite (Bop (Add) (Const (Int 0) ty ctx) e) e :ruleset peepholes)

; a + 0 = 0
(rewrite (Bop (Add) e (Const (Int 0) ty ctx) ) e :ruleset peepholes)

; x - x = 0
(rule (
        (= expr (Bop (Sub) x x))
        (HasArgType expr ty)
        (ContextOf expr ctx)
      )
      ((union expr (Const (Int 0) ty ctx)))
      :ruleset peepholes)

; (x - y) + z => x + (z - y)
(rewrite (Bop (Add) (Bop (Sub) x y) z) (Bop (Add) x (Bop (Sub) z y)) :ruleset peepholes)

; (a + b) - c => a + (b - c)
(rewrite (Bop (Sub) (Bop (Add) a b) c) (Bop (Add) a (Bop (Sub) b c)) :ruleset peepholes)

; (a * x) + a => a * (x + 1)
(rule (
        (= expr (Bop (Add) (Bop (Mul) a x) a))
        (HasArgType expr ty)
        (ContextOf expr ctx)
      )
      ((union expr (Bop (Mul) a (Bop (Add) x (Const (Int 1) ty ctx)))))
      :ruleset peepholes)

; =================================
; Boolean Ops
; =================================

; and(true, a) = a
(rewrite (Bop (And) (Const (Bool true) ty ctx) e) e :ruleset peepholes)

; and(a, true) = a
(rewrite (Bop (And) e (Const (Bool true) ty ctx)) e :ruleset peepholes)

; and(false, a) = false
(rewrite (Bop (And) (Const (Bool false) ty ctx) e) (Const (Bool false) ty ctx) :ruleset peepholes)

; and(a, false) = false
(rewrite (Bop (And) e (Const (Bool false) ty ctx)) (Const (Bool false) ty ctx) :ruleset peepholes)

; or(false, a) = a
(rewrite (Bop (Or) (Const (Bool false) ty ctx) e) e :ruleset peepholes)

; or(a, false) = a
(rewrite (Bop (Or) e (Const (Bool false) ty ctx)) e :ruleset peepholes)

; or(true, a) = true
(rewrite (Bop (Or) (Const (Bool true) ty ctx) e) (Const (Bool true) ty ctx) :ruleset peepholes)

; or(a, true) = true
(rewrite (Bop (Or) e (Const (Bool true) ty ctx)) (Const (Bool true) ty ctx) :ruleset peepholes)

; select(pred, x, x) = x
(rewrite (Top (Select) pred x x) x :ruleset peepholes)

; =================================
; Bit Ops
; =================================
; a / 2 = a >> 1
(rewrite (Bop (Div) e (Const (Int 2) ty ctx)) (Bop (Shr) e (Const (Int 1) ty ctx)) :ruleset lowering-peepholes)

; a * 2 = a << 1
(rewrite (Bop (Mul) e (Const (Int 2) ty ctx)) (Bop (Shl) e (Const (Int 1) ty ctx)) :ruleset lowering-peepholes)

; 2 * a = a << 1
(rewrite (Bop (Mul) (Const (Int 2) ty ctx) e) (Bop (Shl) e (Const (Int 1) ty ctx)) :ruleset lowering-peepholes)
