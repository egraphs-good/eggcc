; Interval datatype
(datatype Interval
  (BoolI bool bool)
  (IntI i64 i64)
  (interval-intersect Interval Interval)
  (interval-union Interval Interval))

; Interval combinators
(rewrite (interval-intersect (IntI la ha) (IntI lb hb))
      (IntI (max la lb) (min ha hb)) :ruleset fast-analyses)
(rewrite (interval-union (IntI la ha) (IntI lb hb))
      (IntI (min la lb) (max ha hb)) :ruleset fast-analyses)
(rewrite (interval-intersect (BoolI la ha) (BoolI lb hb))
      (BoolI (or la lb) (and ha hb)) :ruleset fast-analyses)
(rewrite (interval-union (BoolI la ha) (BoolI lb hb))
      (BoolI (and la lb) (or ha hb)) :ruleset fast-analyses)

; Interval tables: One for universal and one for context-specific
(function ival (Operand) Interval
  :merge (interval-intersect old new))
(function context-ival (Operand Body) Interval
  :merge (interval-intersect old new))

; Constant Intervals
(rule ((= lhs (Node (PureOp (Const (BoolT) (const) (Bool b))))))
      ((set (ival lhs) (BoolI b b))) :ruleset fast-analyses)
(rule ((= lhs (Node (PureOp (Const (IntT) (const) (Num n))))))
      ((set (ival lhs) (IntI n n))) :ruleset fast-analyses)


; < a b interval (< ha lb) (< la hb)
(rule ((= lhs (Node (PureOp (blt (BoolT) a b))))
       (= (IntI la ha) (ival a))
       (= (IntI lb hb) (ival b)))
      ((set (ival lhs) (BoolI (bool-< ha lb) (bool-< la hb))))
      :ruleset fast-analyses)

; Rules that union intervals for a gamma
(rule (
        (= lhs (Project i (Gamma pred ins (VVO outs))))
        (= (VO thens) (vec-get outs 1))
        (= (VO elses) (vec-get outs 0))
        (= thenival (ival (vec-get thens i)))
        (= elseival (ival (vec-get elses i)))
      )
      (
        (set (ival lhs) (interval-union thenival elseival))
      )
      :ruleset fast-analyses
)
(rule (
        (= gamma (Gamma pred ins (VVO outs)))
        (= lhs (Project i gamma))
        (= (VO thens) (vec-get outs 1))
        (= (VO elses) (vec-get outs 0))
        (= thenival (context-ival (vec-get thens i) gamma))
        (= elseival (context-ival (vec-get elses i) gamma))
      )
      (
        (set (ival lhs) (interval-union thenival elseival))
      )
      :ruleset fast-analyses
)

; Eliminate Gammas with constant-interval predicates
(rule (
        (= gamma (Gamma pred inputs (VVO outputs)))
        (= (BoolI true true) (ival pred))
      )
      (
        (union gamma (OperandGroup (SubstVecOperandAll (vec-get outputs 1) inputs)))
      )
      :ruleset fast-analyses
)
(rule (
        (= gamma (Gamma pred inputs (VVO outputs)))
        (= (BoolI false false) (ival pred))
      )
      (
        (union gamma (OperandGroup (SubstVecOperandAll (vec-get outputs 0) inputs)))
      )
      :ruleset fast-analyses
)

; push interval into Gamma
(rule (
      (= gamma (Gamma pred ins (VVO outs)))
      (= arg-i (VecOperand-get ins i))
      (= (IntI l h) (ival arg-i))
      )
      ((set (context-ival (Arg i) gamma) (IntI l h)))
      :ruleset fast-analyses
)

; interval of a + b = (la + lb, ha + hb)
(rule (
      (= lhs (Node (PureOp (badd (IntT) a b))))
      (= (IntI la ha) (ival a))
      (= (IntI lb hb) (ival b))
      )
      (
      (set (ival lhs) (IntI (+ la lb) (+ ha hb)))
      )
      :ruleset fast-analyses
)

; + a b interval (+ la lb) (+ ha hb)
(rule (
      (= plus (Node (PureOp (badd (IntT) a b))))     ; plus Operand
      (= gamma (Gamma pred (VO ins) (VVO outs)))     ; find all the Gammas
      (Body-contains-Operand gamma i plus)           ; if the plus is in the gamma
      (= (IntI la ha) (ival a))        ; get the context-intervals
      (= (IntI lb hb) (context-ival b gamma))
      )
      (
      (set (context-ival plus gamma) (IntI (+ la lb) (+ ha hb)))
      )
      :ruleset fast-analyses
)

; + a b interval (+ la lb) (+ ha hb)
(rule (
      (= plus (Node (PureOp (badd (IntT) a b))))     ; plus Operand
      (= gamma (Gamma pred (VO ins) (VVO outs)))     ; find all the Gammas
      (Body-contains-Operand gamma i plus)           ; if the plus is in the gamma
      (= (IntI la ha) (context-ival a gamma))        ; get the context-intervals
      (= (IntI lb hb) (context-ival b gamma))
      )
      (
      (set (context-ival plus gamma) (IntI (+ la lb) (+ ha hb)))
      )
      :ruleset fast-analyses
)

; + a b interval (+ la lb) (+ ha hb)
(rule (
      (= plus (Node (PureOp (badd (IntT) a b))))     ; plus Operand
      (= gamma (Gamma pred (VO ins) (VVO outs)))     ; find all the Gammas
      (Body-contains-Operand gamma i plus)           ; if the plus is in the gamma
      (= (IntI la ha) (context-ival a gamma))        ; get the context-intervals
      (= (IntI lb hb) (ival b))
      )
      (
      (set (context-ival plus gamma) (IntI (+ la lb) (+ ha hb)))
      )
      :ruleset fast-analyses
)