(function ListExpr-length (ListExpr) i64)
(function ListExpr-ith (ListExpr i64) Expr :unextractable)
(function ListExpr-suffix (ListExpr i64) ListExpr :unextractable)
(function Append (ListExpr Expr) ListExpr :unextractable)

(rule ((Switch pred inputs branch)) ((union (ListExpr-suffix branch 0) branch)) :ruleset always-run)

(rule ((= (ListExpr-suffix top n) (Cons hd tl)))
    ((union (ListExpr-ith top n) hd)
     (union (ListExpr-suffix top (+ n 1)) tl)) :ruleset always-run)

(rule ((= (ListExpr-suffix list n) (Nil)))
    ((set (ListExpr-length list) n)) :ruleset always-run)

(rewrite (Append (Cons a b) e)
   (Cons a (Append b e))
   :ruleset always-run)
(rewrite (Append (Nil) e)
   (Cons e (Nil))
   :ruleset always-run)

(function tuple-length (Expr) i64 :unextractable)

(rule ((HasType expr (TupleT tl))
       (= len (TypeList-length tl)))
      ((set (tuple-length expr) len)) :ruleset always-run)

(relation tuples-to-generate-get-for (Expr))
(relation tuples-to-generate-get-for-list (ListExpr))

(rule ((= e (DoWhile inputs pred_out)))
      ((tuples-to-generate-get-for e)
       (tuples-to-generate-get-for inputs)
       (tuples-to-generate-get-for pred_out))
      :ruleset always-run)
(rule ((= e (If cond inputs thn els)))
       ((tuples-to-generate-get-for e)
        (tuples-to-generate-get-for inputs)
        (tuples-to-generate-get-for thn)
        (tuples-to-generate-get-for els))
       :ruleset always-run)
(rule ((= e (Switch pred inputs branch)))
      ((tuples-to-generate-get-for e)
       (tuples-to-generate-get-for-list branch)
       (tuples-to-generate-get-for inputs))
       :ruleset always-run)
(rule ((tuples-to-generate-get-for-list (Cons hd tl)))
      ((tuples-to-generate-get-for hd)
       (tuples-to-generate-get-for-list tl))
      :ruleset always-run)
(rule ((= e (Arg t a)))
      ((tuples-to-generate-get-for e))
      :ruleset always-run)


;; Create a Get for every index, and rewrite it to see through Concat
; (rule ((Single expr)) ((union (Get (Single expr) 0) expr)) :ruleset always-run)
;; initial get
(rule ((> (tuple-length tuple) 0)
       (tuples-to-generate-get-for tuple))
      ((Get tuple 0))
      :ruleset always-run)
;; next get
(rule ((= len (tuple-length tuple))
       (= ith (Get tuple i))
       (< (+ i 1) len)
       (tuples-to-generate-get-for tuple)
       )
       ((Get tuple (+ 1 i)))
       :ruleset always-run)

(function List-suffix (Expr i64) Expr)
(rule ((Get x i))
      ((union (List-suffix x 0) x))
      :ruleset always-run)
(rule ((= (List-suffix x n) (Concat (Single hd) tl)))
      ((union (List-suffix x (+ n 1)) tl))
      :ruleset always-run)
(rule ((= lhs (Get x i))
       (= (List-suffix x i) (Concat (Single e) rest)))
      ((union lhs e))
      :ruleset always-run)
(rule ((= lhs (Get x i))
       (= (List-suffix x i) (Single e)))
      ((union lhs e))
      :ruleset always-run)
; ;; descend left
; (rewrite (Get (Concat (Single expr1) expr2) 0) expr1
;        :ruleset always-run)
; ;; descend right
; (rewrite (Get (Concat (Single expr1) expr2) i) (Get expr2 (- i 1))
;        :when ((> i 0))
;        :ruleset always-run)


;; A temporary context.
;; Be sure to delete at the end of all actions or else!!!
;; This is safer than using a persistant context, since we may miss an important part of the query.
(function TmpCtx () Assumption)

(rule ((TmpCtx))
  ((panic "TmpCtx should not exist outside rule body"))
  :ruleset always-run)


(ruleset subsume-after-helpers)
;; After running the `saturating` ruleset, these if statements can be subsumed
(relation ToSubsumeIf (Expr Expr Expr Expr))
;; Workaround of https://github.com/egraphs-good/egglog/issues/462
;; Make sure the if we are subsuming is present
(rule ((ToSubsumeIf a b c d)
       (If a b c d))
      ((subsume (If a b c d)))
      :ruleset subsume-after-helpers)


