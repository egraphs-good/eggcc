## gemm computes C := alpha * A * B + beta * C for
## some procedurally generated matrices A, B, C.

@main {
    # constants
    # dimensions correspond to Polybench MEDIUM_DATASET

    NI: int = const 200;
    fNI: float = const 200;
    NJ: int = const 220;
    fNJ: float = const 220;
    NK: int = const 240;
    fNK: float = const 240;

    one: int = const 1;

    # initialize arrays
    A: ptr<float> = call @matrix_new NI NK;
    B: ptr<float> = call @matrix_new NK NJ;
    C: ptr<float> = call @matrix_new NI NJ;
    alpha: float = const 1.5;
    beta: float = const 1.2;
    call @init A B C NI fNI NJ fNJ NK fNK;

    # main computation
    i: int = const 0;
.main_i:
    cond: bool = lt i NI;
    br cond .main_i_body .main_i_done;
.main_i_body:
    j: int = const 0;
.main_j:
    cond: bool = lt j NJ;
    br cond .main_j_body .main_j_done;
.main_j_body:
    call @matrix_scale C i j NJ beta;
    j: int = add j one;
    jmp .main_j;
.main_j_done:
    k: int = const 0;
.main_k:
    cond: bool = lt k NK;
    br cond .main_k_body .main_k_done;
.main_k_body:
    j: int = const 0;
.inner_j:
    cond: bool = lt j NJ;
    br cond .inner_j_body .inner_j_done;
.inner_j_body:
    Aik: float = call @matrix_get A i k NK;
    Bkj: float = call @matrix_get B k j NJ;
    incr: float = fmul alpha Aik;
    incr: float = fmul incr Bkj;
    call @matrix_incr C i j NJ incr;
    j: int = add j one;
    jmp .inner_j;
.inner_j_done:
    k: int = add k one;
    jmp .main_k;
.main_k_done:
    i: int = add i one;
    jmp .main_i;
.main_i_done:

    call @matrix_print C NI NJ;

    free A;
    free B;
    free C;
}

@init(A: ptr<float>, B: ptr<float>, C: ptr<float>,
      NI: int, fNI: float, NJ: int, fNJ: float, NK: int, fNK: float) {
    one: int = const 1;
    fone: float = const 1;
    ftwo: float = const 2;

    i: int = const 0;
    fi: float = const 0;
.init_C_i:
    cond: bool = lt i NI;
    br cond .init_C_i_body .init_C_i_done;
.init_C_i_body:
    j: int = const 0;
    fj: float = const 0;
.init_C_j:
    cond: bool = lt j NJ;
    br cond .init_C_j_body .init_C_j_done;
.init_C_j_body:
    val: float = fmul fi fj;
    val: float = fadd fone val;
    val: float = call @fmod val fNI;
    val: float = fdiv val fNI;
    call @matrix_set C i j NJ val;
    j: int = add j one;
    fj: float = fadd fj fone;
    jmp .init_C_j;
.init_C_j_done:
    i: int = add i one;
    fi: float = fadd fi fone;
    jmp .init_C_i;
.init_C_i_done:

    i: int = const 0;
    fi: float = const 0;
.init_A_i:
    cond: bool = lt i NI;
    br cond .init_A_i_body .init_A_i_done;
.init_A_i_body:
    j: int = const 0;
    fj: float = const 0;
.init_A_j:
    cond: bool = lt j NK;
    br cond .init_A_j_body .init_A_j_done;
.init_A_j_body:
    val: float = fadd fj fone;
    val: float = fmul fi val;
    val: float = call @fmod val fNK;
    val: float = fdiv val fNK;
    call @matrix_set A i j NK val;
    j: int = add j one;
    fj: float = fadd fj fone;
    jmp .init_A_j;
.init_A_j_done:
    i: int = add i one;
    fi: float = fadd fi fone;
    jmp .init_A_i;
.init_A_i_done:

    i: int = const 0;
    fi: float = const 0;
.init_B_i:
    cond: bool = lt i NK;
    br cond .init_B_i_body .init_B_i_done;
.init_B_i_body:
    j: int = const 0;
    fj: float = const 0;
.init_B_j:
    cond: bool = lt j NJ;
    br cond .init_B_j_body .init_B_j_done;
.init_B_j_body:
    val: float = fadd fj ftwo;
    val: float = fmul fi val;
    val: float = call @fmod val fNJ;
    val: float = fdiv val fNJ;
    call @matrix_set B i j NJ val;
    j: int = add j one;
    fj: float = fadd fj fone;
    jmp .init_B_j;
.init_B_j_done:
    i: int = add i one;
    fi: float = fadd fi fone;
    jmp .init_B_i;
.init_B_i_done:
}


@matrix_new(Nrow: int, Ncol: int): ptr<float> {
    total: int = mul Nrow Ncol;
    ptr: ptr<float> = alloc total;
    ret ptr;
}

@matrix_loc(mtx: ptr<float>, row: int, col: int, Ncol: int): ptr<float> {
    row_offset: int = mul row Ncol;
    offset: int = add row_offset col;
    new_ptr: ptr<float> = ptradd mtx offset;
    ret new_ptr;
}

# EXPECTS:
#   @matrix_loc defined
@matrix_get(mtx: ptr<float>, row: int, col: int, Ncol: int): float {
    ptr: ptr<float> = call @matrix_loc mtx row col Ncol;
    val: float = load ptr;
    ret val;
}

# EXPECTS:
#   @matrix_loc defined
@matrix_set(mtx: ptr<float>, row: int, col: int, Ncol: int, val: float) {
    ptr: ptr<float> = call @matrix_loc mtx row col Ncol;
    store ptr val;
}

# EXPECTS:
#   @matrix_loc defined
@matrix_incr(mtx: ptr<float>, row: int, col: int, Ncol: int, incr: float) {
    ptr: ptr<float> = call @matrix_loc mtx row col Ncol;
    val: float = load ptr;
    new_val: float = fadd val incr;
    store ptr new_val;
}

# EXPECTS:
#   @matrix_loc defined
@matrix_scale(mtx: ptr<float>, row: int, col: int, Ncol: int, scale: float) {
    ptr: ptr<float> = call @matrix_loc mtx row col Ncol;
    val: float = load ptr;
    new_val: float = fmul val scale;
    store ptr new_val;
}

@matrix_print(mtx: ptr<float>, Nrow: int, Ncol: int) {
    i: int = const 0;
    one: int = const 1;
    total: int = mul Nrow Ncol;
.while:
    cond: bool = lt i total;
    br cond .body .done;
.body:
    mtx_loc: ptr<float> = ptradd mtx i;
    val: float = load mtx_loc;
    print val;
    i: int = add i one;
    jmp .while;
.done:
}

# Search for n % m where n and m are floats by
# iteratively subtracting the largest m*2^k that
# fits inside n. 
# Takes O((log n/m)^2) time.
# NOTE: In C, this can be done with a built in 
# function, but this is the best we can do.
@fmod(n: float, m: float): float {
    zero: float = const 0;
    two: float = const 2;
    rem: float = id n;
.while:
    cond: bool = fge rem m;
    br cond .body .done;
.body:
    decr: float = id m;
.while_inner:
    diff: float = fsub rem decr;
    cond: bool = fge diff zero;
    br cond .body_inner .done_inner;
.body_inner:
    decr: float = fmul decr two;
    jmp .while_inner;
.done_inner:
    decr: float = fdiv decr two;
    rem: float = fsub rem decr;
    jmp .while;
.done:
    ret rem;
}