@main() {
  loop_incr: int = const 1;
  loop_counter: int = const 10;
  loop_bound: int = const 100000;
.loop_cond:
  loop_cond: bool = lt loop_counter loop_bound;
  br loop_cond .loop_body .loop_done;
.loop_body:
  call @orig_main loop_counter;
  loop_counter: int = add loop_counter loop_incr;
  jmp .loop_cond;
.loop_done:
}

@orig_main(n : int) {

	call @printBinary n;
}

@printBinary(n: int) {
	zero: int = const 0;
	cond: bool = eq n zero;
	br cond .end .rec;
.rec:
	two: int = const 2;
	v0: int = call @mod n two;
	v1: int = div n two;
	call @printBinary v1;
	print v0;
.end:
}

@mod(a0: int, a1: int) : int {
	v0: int = div a0 a1;
	v1: int = mul v0 a1;
	v2: int = sub a0 v1;
	ret v2;
}


