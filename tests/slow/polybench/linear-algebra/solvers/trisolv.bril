## trisolv is a triangular solver.

@main {
    # constants
    # dimensions correspond to Polybench MEDIUM_DATASET

    N: int = const 400;
    fN: float = const 400;

    one: int = const 1;
    zero: int = const 0;

    # initialize arrays
    L: ptr<float> = call @matrix_new N N;
    b: ptr<float> = call @vector_new N;
    x: ptr<float> = call @vector_new N;
    call @init L b x N fN;

    # main computation
    i: int = const 0;
.main_i:
    cond: bool = lt i N;
    br cond .main_i_body .main_i_done;
.main_i_body:
    bi: float = call @vector_get b i;
    call @vector_set x i bi;
    j: int = const 0;
.main_j:
    cond: bool = lt j i;
    br cond .main_j_body .main_j_done;
.main_j_body:
    Lij: float = call @matrix_get L i j N;
    xj: float = call @vector_get x j;
    val: float = fmul Lij xj;
    call @vector_decr x i val;
    j: int = add j one;
    jmp .main_j;
.main_j_done:
    xi: float = call @vector_get x i;
    Lii: float = call @matrix_get L i i N;
    val: float = fdiv xi Lii;
    call @vector_set x i val;
    i: int = add i one;
    jmp .main_i;
.main_i_done:

    call @vector_print x N;

    free L;
    free x;
    free b;
}

@init(L: ptr<float>, b: ptr<float>, x: ptr<float>,
      N: int, fN: float) {
    one: int = const 1;
    fone: float = const 1;
    ftwo: float = const 2;
    finvalid: float = const -999;

    i: int = const 0;
    fi: float = const 0;
.init_i:
    cond: bool = lt i N;
    br cond .init_i_body .init_i_done;
.init_i_body:
    call @vector_set x i finvalid;
    call @vector_set b i fi;
    j: int = const 0;
    fj: float = const 0;
.init_j:
    cond: bool = le j i;
    br cond .init_j_body .init_j_done;
.init_j_body:
    val: float = fadd fi fN;
    val: float = fsub val fj;
    val: float = fadd val fone;
    val: float = fmul val ftwo;
    val: float = fdiv val fN;
    call @matrix_set L i j N val;

    j: int = add j one;
    fj: float = fadd fj fone;
    jmp .init_j;
.init_j_done:
    i: int = add i one;
    fi: float = fadd fi fone;
    jmp .init_i;
.init_i_done:
}

@matrix_new(Nrow: int, Ncol: int): ptr<float> {
    total: int = mul Nrow Ncol;
    ptr: ptr<float> = alloc total;
    ret ptr;
}

@matrix_loc(mtx: ptr<float>, row: int, col: int, Ncol: int): ptr<float> {
    row_offset: int = mul row Ncol;
    offset: int = add row_offset col;
    new_ptr: ptr<float> = ptradd mtx offset;
    ret new_ptr;
}

# EXPECTS:
#   @matrix_loc defined
@matrix_get(mtx: ptr<float>, row: int, col: int, Ncol: int): float {
    ptr: ptr<float> = call @matrix_loc mtx row col Ncol;
    val: float = load ptr;
    ret val;
}

# EXPECTS:
#   @matrix_loc defined
@matrix_set(mtx: ptr<float>, row: int, col: int, Ncol: int, val: float) {
    ptr: ptr<float> = call @matrix_loc mtx row col Ncol;
    store ptr val;
}

@vector_new(N: int): ptr<float> {
    ptr: ptr<float> = alloc N;
    ret ptr;
}

@vector_get(vec: ptr<float>, i: int): float {
    ptr: ptr<float> = ptradd vec i;
    val: float = load ptr;
    ret val;
}

@vector_set(vec: ptr<float>, i: int, val: float) {
    ptr: ptr<float> = ptradd vec i;
    store ptr val;
}

@vector_decr(vec: ptr<float>, i: int, decr: float) {
    ptr: ptr<float> = ptradd vec i;
    val: float = load ptr;
    new_val: float = fsub val decr;
    store ptr new_val;
}

# EXPECTS:
#   @vector_get defined
@vector_print(vec: ptr<float>, N: int) {
    i: int = const 0;
    one: int = const 1;
.while:
    cond: bool = lt i N;
    br cond .body .done;
.body:
    val: float = call @vector_get vec i;
    print val;
    i: int = add i one;
    jmp .while;
.done:
}