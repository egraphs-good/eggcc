@main() {
  loop_incr: int = const 1;
  loop_counter: int = const 10;
  loop_bound: int = const 1000000;
.loop_cond:
  loop_cond: bool = lt loop_counter loop_bound;
  br loop_cond .loop_body .loop_done;
.loop_body:
  call @orig_main loop_counter;
  loop_counter: int = add loop_counter loop_incr;
  jmp .loop_cond;
.loop_done:
}

@orig_main(input : int) {
  zero : int = const 0;
  ten : int = const 10;
  sum : int = const 0;
  digits : int = call @getDigits input;
  tmp : int = id input;
.loop:
  b : bool = gt tmp zero;
  br b .body .done;
.body:
  digit : int = call @mod tmp ten;
  pow : int = call @power digit digits;
  sum : int = add sum pow;
  tmp : int = div tmp ten;
  jmp .loop;
.done:
  res : bool = eq input sum;
  print res;
}

@getDigits(n : int) : int {
  ten : int = const 10;
  zero : int = const 0;
  one : int = const 1;
  div : int = div n ten;
  cond : bool = eq div zero;
  br cond .then .else;
.then:
  ret one;
.else:
  rec : int = call @getDigits div;
  res : int = add rec one;
  ret res;
}

@mod(a: int, b: int): int {
  q: int = div a b;
  aq: int = mul b q;
  mod: int = sub a aq;
  ret mod; 
}

@power(base : int, exp : int) : int {
  ten : int = const 10;
  zero : int = const 0;
  one : int = const 1;
  res : int = const 1;
.loop:
  b : bool = eq exp zero;
  br b .done .body;
.body:
  res : int = mul res base;
  exp : int = sub exp one;
  jmp .loop;
.done:
  ret res;
}
