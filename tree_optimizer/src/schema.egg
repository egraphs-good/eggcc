; We could generate this from ir.rs, this manual version is just easier reference.

(sort IdSort)
(function Id (i64) IdSort)
(function Shared () IdSort)
(let shared (Shared))
(datatype Expr)
(datatype ListExpr (Cons Expr ListExpr) (Nil))

(sort TypeList)

(datatype Type
  (IntT)
  (BoolT)
  (FuncT Type Type)
  (TupleT TypeList)
  (UnitT)
)

(function TNil () TypeList)
(function TCons (Type TypeList) TypeList)

; ==========================
; Pure operators
; ==========================
;              id     val
(datatype BinPureOp
  (Add)
  (Sub)
  (Mul)
  (LessThan)
  (And)
  (Or))
(datatype UnaryPureOp
  (Not))

;; Constants
(function UnitExpr (IdSort) Expr)
(function Num (IdSort i64) Expr)
;                  id     val
(function Boolean (IdSort bool) Expr)

;; Pure operators
(function BOp (BinPureOp Expr Expr) Expr)
(function UOp (UnaryPureOp Expr) Expr)
(function Get (Expr i64) Expr) ; gets from a tuple. static index

; ==========================
; Effectful operators
; ==========================

;                value      unit
(function Print (Expr)      Expr)
;                addr type      value
(function Read  (Expr Type)      Expr)
;                addr value unit
(function Write (Expr Expr) Expr)

; ==========================
; Control flow operators
; ==========================

(datatype Order (Parallel) (Sequential))

; Perform a list of operations. Only way to create a tuple!
(function All (IdSort Order ListExpr) Expr)

; Switch on a list of lazily-evaluated branches.
; branches must be constructed with `(Branch id expr)`.
; pred must be an integer
;                 pred branches chosen
(function Switch (Expr ListExpr)    Expr)
; If is like switch, but with a boolean predicate
;  pred then else
(function If (Expr Expr Expr) Expr)
(function Branch (IdSort Expr) Expr)

; ==========================
; Regions
; ==========================

; pred and output are evaluated inside the loop's context
; input and output may or may not be a tuples. pred must be boolean.
; 
;               id     input (pred, output) tuple
(function Loop (IdSort Expr  Expr)  Expr)

;              id     input output
(function Let (IdSort Expr  Expr) Expr)

; Arg gets the input of a region or the parameter of a function
(function Arg (IdSort) Expr)

; ==========================
; Functions
; ==========================

; A list of functions, with the first one being the entry point
(function Program  (ListExpr) Expr)
;                   id     name   input ty  output ty  output
(function Function (IdSort String Type      Type       Expr)      Expr)

;               referencing id   name of func  arg
(function Call (IdSort           String        Expr) Expr)


;; Rulesets
(ruleset always-run)
(ruleset error-checking)
