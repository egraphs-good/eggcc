; Every term is an `Expr` or a `ListExpr`.
(datatype Expr)
; Used for constructing a list of branches for `Switch`es
; or a list of functions in a `Program`.
(datatype ListExpr (Cons Expr ListExpr) (Nil))

; =================================
; Types
; =================================

(sort TypeList)

(datatype Type
  (IntT)
  (BoolT)
  (UnitT)
  ; Nested tuple types are not allowed
  (TupleT TypeList) 
)

(function TNil () TypeList)
(function TCons (Type TypeList) TypeList)

; =================================
; Operators that do not create regions
; =================================
(datatype BinaryOp
  (Add)
  (Sub)
  (Mul)
  (LessThan)
  (And)
  (Or)
  (Write))
(datatype UnaryOp
  (Not)
  (Print))

; Constants
(datatype Constant
  (Int i64)
  (Bool bool)
  (Unit))
(function Const (Constant) Expr)
;; global short hand for (Const (Unit))
(let unit (Const (Unit)))

; Operators
(function Bop   (BinaryOp Expr Expr) Expr)
(function Uop   (UnaryOp Expr) Expr)
; gets from a tuple. static index
(function Get   (Expr i64) Expr)
; read has a type, so it can't be a BinaryOp
(function Read  (Expr Type)      Expr) 
;               name of func   arg
(function Call (String         Expr) Expr)


; =================================
; Tuple operations
; =================================

; There are only two ways to create a tuple.
; 1. Use `(Unit)` for an empty tuple.
; 2. Use `(Push)` to add to the back of a tuple.
; Nested tuples are not allowed.
; The helpers `Concat` and `SubTuple` help keep tuples flatt.


; Defines the order of evaluating a `Push` term.
; If the order is `Parallel`, the "value expr" may be evaluated first
; or the "tuple expr" may be evaluated first.
; Either way, the program should reach an equivalent state.
(datatype Order (Parallel) (Sequential))
; global short hand for (Parallel)
(let par (Parallel))
; global short hand for (Sequential)
(let seq (Sequential))

; An empty tuple
(function Empty () Expr)
; global short hand for (Empty)
(let empty (Empty))

; Evaluates an expression and adds it to the *back* of a tuple.
; e.g. (Push (Parallel) a (Push (Sequential) b c)) = (c, b, a)
; There are two valid evaluation orders: a, b, c or b, c, a
;               order   value expr        tuple expr
(function Push (Order   Expr              Expr)       Expr)

; =================================
; Control flow
; =================================

; Switch on a list of lazily-evaluated branches.
; Does not create a region.
; pred must be an integer
;                 pred     branches     chosen
(function Switch (Expr     ListExpr)    Expr)
; If is like switch, but with a boolean predicate
;             pred then else
(function If (Expr Expr Expr) Expr)


; Creates a region, binding the input so that it can
; be referred to using `Arg`.
; 
;              input    output
(function Let (Expr     Expr)    Expr)


; A do-while loop.

; iter_val = [[input]]
; pred_val = false
; while !pred_val:
;   pred_val, iter_val = iter_val = [[pred_output[ arg |-> iter_val]]]
; iter_val

; input must have the same type as output
; pred must be a boolean
;                  input   (pred, output) tuple
(function DoWhile (Expr    Expr)                   Expr)


; An argument to a region.
(function Arg (Type) Expr)



; =================================
; Assume
; =================================

(datatype Assumption
  ; The argument is bound to `expr`.
  ; The argument cannot be unioned with `expr` because `expr`
  ; is evaluated once at the nearest enclosing `Let`.
  ;      expr
  (InLet Expr)
  ; The term is in a loop with `input` and `output`.
  ;      input    output
  (InLoop Expr     Expr)
  ; Other assumptions are possible, but not supported yet.
  ; For example:
  ;      A boolean predicate is true.
  ;      e.g. (> (Arg (IntT)) (Const (Int 2)))
  ; (IsTrue Expr))
)

; Assume allows creating context-specific terms.
; e.g. (Assume (InLet (Const (Int 2))) (Arg (IntT))) is equal to (Const (Int 2))
(function Assume (Assumption Expr) Expr)


; =================================
; Top-level expressions
; =================================
; An entry function and a list of additional functions.
;                      entry function     other functions
(relation Program     (Expr               ListExpr))
;                   name   input ty  output ty  output
(function Function (String Type      Type       Expr)      Expr)



; Rulesets
(ruleset always-run)
(ruleset error-checking)
